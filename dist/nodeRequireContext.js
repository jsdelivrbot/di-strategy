"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

// based on require-webpack-compat
function getFolderContents(folder, recursive) {
  return _fs.default.readdirSync(folder).reduce(function (list, file) {
    var name = _path.default.resolve(folder, file);

    var isDir = _fs.default.statSync(name).isDirectory();

    return list.concat(isDir && recursive ? getFolderContents(name, recursive) : [name]);
  }, []);
}

;

function _default(folder, recursive, pattern) {
  var mod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : module.parent;

  var parentDir = _path.default.dirname(mod.filename);

  var contextDir = _path.default.join(parentDir, folder);

  var contextDirLen = contextDir.length + 1;

  var normalizedFolder = _path.default.resolve(parentDir, folder);

  var folderContents = getFolderContents(normalizedFolder, recursive).filter(function (item) {
    return pattern.test(item);
  }).map(function (item) {
    return './' + item.substr(contextDirLen);
  });

  var keys = function keys() {
    return folderContents;
  };

  var returnContext = function returnContext(item) {
    return require(_path.default.resolve(normalizedFolder, item));
  };

  returnContext.keys = keys;
  return returnContext;
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub2RlUmVxdWlyZUNvbnRleHQuanMiXSwibmFtZXMiOlsiZ2V0Rm9sZGVyQ29udGVudHMiLCJmb2xkZXIiLCJyZWN1cnNpdmUiLCJyZWFkZGlyU3luYyIsInJlZHVjZSIsImxpc3QiLCJmaWxlIiwibmFtZSIsInJlc29sdmUiLCJpc0RpciIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJjb25jYXQiLCJwYXR0ZXJuIiwibW9kIiwibW9kdWxlIiwicGFyZW50IiwicGFyZW50RGlyIiwiZGlybmFtZSIsImZpbGVuYW1lIiwiY29udGV4dERpciIsImpvaW4iLCJjb250ZXh0RGlyTGVuIiwibGVuZ3RoIiwibm9ybWFsaXplZEZvbGRlciIsImZvbGRlckNvbnRlbnRzIiwiZmlsdGVyIiwidGVzdCIsIml0ZW0iLCJtYXAiLCJzdWJzdHIiLCJrZXlzIiwicmV0dXJuQ29udGV4dCIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUhBO0FBS0EsU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxTQUFuQyxFQUE4QztBQUU3QyxTQUFPLFlBQUdDLFdBQUgsQ0FBZUYsTUFBZixFQUF1QkcsTUFBdkIsQ0FBOEIsVUFBU0MsSUFBVCxFQUFlQyxJQUFmLEVBQXFCO0FBRXpELFFBQU1DLE9BQU8sY0FBS0MsT0FBTCxDQUFhUCxNQUFiLEVBQXFCSyxJQUFyQixDQUFiOztBQUNBLFFBQU1HLFFBQVEsWUFBR0MsUUFBSCxDQUFZSCxJQUFaLEVBQWtCSSxXQUFsQixFQUFkOztBQUVBLFdBQU9OLEtBQUtPLE1BQUwsQ0FBYUgsU0FBU1AsU0FBVixHQUF1QkYsa0JBQWtCTyxJQUFsQixFQUF3QkwsU0FBeEIsQ0FBdkIsR0FBNEQsQ0FBQ0ssSUFBRCxDQUF4RSxDQUFQO0FBQ0EsR0FOTSxFQU1KLEVBTkksQ0FBUDtBQU9BOztBQUFBOztBQUVjLGtCQUFTTixNQUFULEVBQWlCQyxTQUFqQixFQUE0QlcsT0FBNUIsRUFBMEQ7QUFBQSxNQUFyQkMsR0FBcUIsdUVBQWZDLE9BQU9DLE1BQVE7O0FBQ3hFLE1BQU1DLFlBQVksY0FBS0MsT0FBTCxDQUFhSixJQUFJSyxRQUFqQixDQUFsQjs7QUFDQSxNQUFNQyxhQUFhLGNBQUtDLElBQUwsQ0FBVUosU0FBVixFQUFxQmhCLE1BQXJCLENBQW5COztBQUNBLE1BQU1xQixnQkFBZ0JGLFdBQVdHLE1BQVgsR0FBa0IsQ0FBeEM7O0FBQ0EsTUFBTUMsbUJBQW1CLGNBQUtoQixPQUFMLENBQWFTLFNBQWIsRUFBd0JoQixNQUF4QixDQUF6Qjs7QUFDQSxNQUFNd0IsaUJBQWlCekIsa0JBQWtCd0IsZ0JBQWxCLEVBQW9DdEIsU0FBcEMsRUFDckJ3QixNQURxQixDQUNkLGdCQUFNO0FBQ2IsV0FBT2IsUUFBUWMsSUFBUixDQUFhQyxJQUFiLENBQVA7QUFDQSxHQUhxQixFQUlyQkMsR0FKcUIsQ0FJakIsZ0JBQU07QUFDVixXQUFPLE9BQUtELEtBQUtFLE1BQUwsQ0FBWVIsYUFBWixDQUFaO0FBQ0EsR0FOcUIsQ0FBdkI7O0FBU0EsTUFBTVMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDdkIsV0FBT04sY0FBUDtBQUNBLEdBRkQ7O0FBSUEsTUFBTU8sZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDSixJQUFELEVBQVE7QUFDN0IsV0FBT0ssUUFBUSxjQUFLekIsT0FBTCxDQUFhZ0IsZ0JBQWIsRUFBK0JJLElBQS9CLENBQVIsQ0FBUDtBQUNBLEdBRkQ7O0FBSUFJLGdCQUFjRCxJQUFkLEdBQXFCQSxJQUFyQjtBQUVBLFNBQU9DLGFBQVA7QUFDQTs7QUFBQSIsImZpbGUiOiJub2RlUmVxdWlyZUNvbnRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBiYXNlZCBvbiByZXF1aXJlLXdlYnBhY2stY29tcGF0XG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5cbmZ1bmN0aW9uIGdldEZvbGRlckNvbnRlbnRzKGZvbGRlciwgcmVjdXJzaXZlKSB7XG5cblx0cmV0dXJuIGZzLnJlYWRkaXJTeW5jKGZvbGRlcikucmVkdWNlKGZ1bmN0aW9uKGxpc3QsIGZpbGUpIHtcblxuXHRcdGNvbnN0IG5hbWUgPSBwYXRoLnJlc29sdmUoZm9sZGVyLCBmaWxlKTtcblx0XHRjb25zdCBpc0RpciA9IGZzLnN0YXRTeW5jKG5hbWUpLmlzRGlyZWN0b3J5KCk7XG5cblx0XHRyZXR1cm4gbGlzdC5jb25jYXQoKGlzRGlyICYmIHJlY3Vyc2l2ZSkgPyBnZXRGb2xkZXJDb250ZW50cyhuYW1lLCByZWN1cnNpdmUpIDogW25hbWVdKTtcblx0fSwgW10pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZm9sZGVyLCByZWN1cnNpdmUsIHBhdHRlcm4sIG1vZCA9IG1vZHVsZS5wYXJlbnQpIHtcblx0Y29uc3QgcGFyZW50RGlyID0gcGF0aC5kaXJuYW1lKG1vZC5maWxlbmFtZSk7XG5cdGNvbnN0IGNvbnRleHREaXIgPSBwYXRoLmpvaW4ocGFyZW50RGlyLCBmb2xkZXIpO1xuXHRjb25zdCBjb250ZXh0RGlyTGVuID0gY29udGV4dERpci5sZW5ndGgrMTtcblx0Y29uc3Qgbm9ybWFsaXplZEZvbGRlciA9IHBhdGgucmVzb2x2ZShwYXJlbnREaXIsIGZvbGRlcik7XG5cdGNvbnN0IGZvbGRlckNvbnRlbnRzID0gZ2V0Rm9sZGVyQ29udGVudHMobm9ybWFsaXplZEZvbGRlciwgcmVjdXJzaXZlKVxuXHRcdC5maWx0ZXIoaXRlbT0+e1xuXHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChpdGVtKTtcblx0XHR9KVxuXHRcdC5tYXAoaXRlbT0+e1xuXHRcdFx0cmV0dXJuICcuLycraXRlbS5zdWJzdHIoY29udGV4dERpckxlbik7XG5cdFx0fSlcblx0O1xuXG5cdGNvbnN0IGtleXMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm9sZGVyQ29udGVudHM7XG5cdH07XG5cblx0Y29uc3QgcmV0dXJuQ29udGV4dCA9IChpdGVtKT0+e1xuXHRcdHJldHVybiByZXF1aXJlKHBhdGgucmVzb2x2ZShub3JtYWxpemVkRm9sZGVyLCBpdGVtKSk7XG5cdH07XG5cblx0cmV0dXJuQ29udGV4dC5rZXlzID0ga2V5cztcblxuXHRyZXR1cm4gcmV0dXJuQ29udGV4dDtcbn07XG4iXX0=